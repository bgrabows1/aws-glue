---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cloudformation template for AWS Glue resource and integration with other AWS
  resources like Athena, S3 and RDS.

Parameters:
# The name of the crawler to be created
  AuroraStack:
    Type: String
    Description: Aurora stack name.
  CrawlerName:
    Type: String
    Description: A crawler name.
  CrawlerDatabaseName:
    Type: String
    Description: Container for crawler metadata tables.
  TablePrefixName:
    Type: String
    Description: Table prefix name.
  JDBCConnectionName:
    Type: String
    Description: JDBC connection name.
  JDBCString:
    Type: String
    Description: JDBC connection string.
  JDBCUser:
    Type: String
    Description: JDBC user name.
  JDBCPassword:
    Type: String
    Description: JDBC password.
    NoEcho: true

Resources:
  AWSGlueServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AWSGlueServiceRole"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "GlueServiceRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Resource: "*"
                Action:
                  - "glue:*"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                  - "s3:ListAllMyBuckets"
                  - "s3:GetBucketAcl"
                  - "ec2:DescribeVpcEndpoints"
                  - "ec2:DescribeRouteTables"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcAttribute"
                  - "iam:ListRolePolicies"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "cloudwatch:PutMetricData"
              -
                Effect: "Allow"
                Resource: "arn:aws:s3:::bg-glue*"
                Action:
                  - "s3:CreateBucket"
              -
                Effect: "Allow"
                Resource:
                  - "arn:aws:s3:::bg-glue*/*"
                  - "arn:aws:s3:::*/*bg-glue*/*"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
              -
                Effect: "Allow"
                Resource:
                  - "arn:aws:s3:::crawler-public*"
                  - "arn:aws:s3:::bg-glue*"
                Action:
                  - "s3:GetObject"
              -
                Effect: "Allow"
                Resource: "arn:aws:logs:*:*:/bg-glue/*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:AssociateKmsKey"
              -
                Effect: "Allow"
                Resource:
                  - "arn:aws:ec2:*:*:network-interface/*"
                  - "arn:aws:ec2:*:*:security-group/*"
                  - "arn:aws:ec2:*:*:instance/*"
                Action:
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                Condition:
                  ForAllValues:StringEquals:
                    aws:TagKeys:
                      - "aws-glue-service-resource"

  ConnectionMySQL:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Description: "Connect to MySQL database."
        ConnectionType: "JDBC"
        #MatchCriteria: none
        PhysicalConnectionRequirements:
          AvailabilityZone:
            Fn::Select:
              - 0
              - Fn::GetAZs: ""
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${AuroraStack}-Aurora-Private-Subnet-1"
          SecurityGroupIdList:
            -
              Fn::ImportValue:
                Fn::Sub: "${AuroraStack}-Aurora-Security-Group"
        ConnectionProperties: {
          "JDBC_CONNECTION_URL": !Ref JDBCString,
          "USERNAME": !Ref JDBCUser,
          "PASSWORD": !Ref JDBCPassword
        }
        Name: !Ref JDBCConnectionName

  CrawlerDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref CrawlerDatabaseName
        Description: "AWS Glue container to hold metadata tables for the crawler"
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - 'arn:aws:s3:::bg-glue/*'
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      RouteTableIds:
        -
          Fn::ImportValue:
            Fn::Sub: "${AuroraStack}-Aurora-Route-Table"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${AuroraStack}-Aurora-VPCID"
  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Ref CrawlerName
      Role: !GetAtt AWSGlueServiceRole.Arn
      #Classifiers: none, use the default classifier
      Description: AWS Glue crawler to crawl data
      #Schedule: none, use default run-on-demand
      DatabaseName: !Ref CrawlerDatabaseName
      Targets:
        S3Targets:
          # Public S3 bucket with the data
          - Path: "s3://tbd"
      TablePrefix: !Ref TablePrefixName
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
  CrawlerTable:
    # Creating the table waits for the database to be created
    DependsOn: CrawlerDatabase
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CrawlerDatabaseName
      TableInput:
        Name: !Ref CrawlerTableName
        Description: Define the first few columns of the table
        TableType: EXTERNAL_TABLE
        Parameters: {
          "classification": "csv"
        }
#       ViewExpandedText: String
        PartitionKeys:
        # Data is partitioned by month
        - Name: mon
          Type: bigint
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: tbd
            Type: tbd
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: s3://tbd
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
# Partition 1
# Create an AWS Glue partition
  CrawlerTablePartition1:
    DependsOn: CrawlerTable
    Type: AWS::Glue::Partition
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CrawlerDatabase
      TableName: !Ref CrawlerTableName
      PartitionInput:
        Values:
        - 1
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: mon
            Type: bigint
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: s3://tbd
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
