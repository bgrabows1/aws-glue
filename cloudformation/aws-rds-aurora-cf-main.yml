---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cloudformation template for AWS RDS Aurora database.

Parameters:
  AuroraDBName:
    Description: Aurora database name.
    Type: String
    MaxLength: 64
    MinLength: 1
    NoEcho: false
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 64 characters
    ConstraintDescription: Must contain only alphanumeric characters with minimum of 8 characters.
  AuroraDBInstanceType:
    Description: Choose the DB instance class that allocates the computational, network, and memory capacity
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t2.small
      - db.t2.medium
  DBEngineVersion:
    Description: Select Database Engine Version
    Type: String
    Default: aurora
    AllowedValues:
      - aurora
  DBSnapshotName:
    Description: Optional. DB Snapshot ID to restore database. Leave this blank if you are not restoring from a snapshot.
    Type: String
    Default: ""
  AlertSnsTopicArn:
    Description: Enter Alert Notification SNS Topic ARN for RDS.
    Type: String
    Default: arn:aws:sns:eu-west-2:000000000000:aurora
  EmailAddress:
    Description: The Email notification list is used to configure a SNS topic for sending cloudwatch alarm and RDS Event notifications.
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Database Configuration
        Parameters:
          - AuroraDBName
          - AuroraDBInstanceType
          - DBEngineVersion
          - DBSnapshotName
      -
        Label:
          default: CloudWatch Configuration
        Parameters:
          - AlertSnsTopicArn
          - EmailAddress
    ParameterLabels:
      AuroraDBName:
        default: Database Cluster Name
      AuroraDBInstanceType:
        dafault: Database Instance Type
      AlertSnsTopicArn:
        default: SNS Topic Arn
      EmailAddress:
        default: Email Address for SNS notifications
      DBSnapshotName:
        default: DB Snapshot ID to restore database
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 172.24.0.0/16
    Private1:
      CIDR: 172.24.0.0/24
    Private2:
      CIDR: 172.24.1.0/24

  DBFamilyMap:
    aurora:
      family: aurora5.6
Conditions:
  ConfigureAlarms: !Not [!Equals [!Ref AlertSnsTopicArn, '']]
  HasEmailSubscription: !Not [!Equals [!Ref EmailAddress, '']]
  IsUseDBSnapshot: !Not [!Equals [!Ref DBSnapshotName, '']]
  IsNotUseDBSnapshot: !Not [Condition: IsUseDBSnapshot]
Resources:
  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for RDS instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      TargetId: !Ref AuroraCluster
      TargetType: AWS::RDS::DBCluster
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaServiceRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Resource: "*"
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
  MonitoringIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "monitoring.rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
  AlarmCpu:
    Condition: ConfigureAlarms
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - AuroraInstance
    Properties:
      AlarmActions:
        - Ref: AlertSnsTopicArn
      InsufficientDataActions:
        - Ref: AlertSnsTopicArn
      AlarmDescription: CPU Utilization on RDS Instance is too high
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: DBInstanceIdentifier
        Value:
          Ref: AuroraInstance
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Period: '300'
      Statistic: Average
      Threshold: '50'
  AlarmFreeSpace:
    Condition: ConfigureAlarms
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - AuroraInstance
    Properties:
      AlarmActions:
        - Ref: AlertSnsTopicArn
      InsufficientDataActions:
        - Ref: AlertSnsTopicArn
      AlarmDescription: 1Gb left of storage available on RDS Instance
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: DBInstanceIdentifier
        Value:
          Ref: AuroraInstance
      EvaluationPeriods: '1'
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Period: '300'
      Statistic: Maximum
      Threshold: '1024000000'
  AuroraSubscription:
    Condition: HasEmailSubscription
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref EmailAddress
      Protocol: email
      TopicArn: !Ref AlertSnsTopicArn
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref AuroraDBName, "vpc"]]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private1
        - CIDR
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref AuroraDBName, "private-subnet-1"]]
      - Key: Network
        Value: Private1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private2
        - CIDR
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref AuroraDBName, "private-subnet-2"]]
      - Key: Network
        Value: Private2
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref AuroraDBName, "private-rt"]]
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  AuroraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Aurora security group."
      VpcId:
        Ref: VPC
  AuroraSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AuroraSecurityGroup
    Properties:
      GroupId: !Ref AuroraSecurityGroup
      IpProtocol: tcp
      FromPort: "3306"
      ToPort: "3306"
      CidrIp:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
  AuroraSecGroupInsideTrafficIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AuroraSecurityGroup
    Properties:
      GroupId: !Ref AuroraSecurityGroup
      IpProtocol: tcp
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !Ref AuroraSecurityGroup
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
  RDSDBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Parameters:
        character_set_database: "utf32"
      Family: !FindInMap [DBFamilyMap, !Ref DBEngineVersion, "family"]
      Description: "A parameter group for aurora db."
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !If [IsUseDBSnapshot, !Ref "AWS::NoValue", !Ref AuroraDBName]
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: !Ref DBEngineVersion
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSInstanceRotationSecret, ':SecretString:password}}' ]]
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSInstanceRotationSecret, ':SecretString:username}}' ]]
      SnapshotIdentifier: !If [IsUseDBSnapshot, !Ref DBSnapshotName, !Ref "AWS::NoValue"]
      StorageEncrypted: !If [IsUseDBSnapshot, !Ref "AWS::NoValue", true]
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
      VpcSecurityGroupIds:
        - Ref: AuroraSecurityGroup
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
  AuroraInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: !Ref AuroraDBInstanceType
      PubliclyAccessible: false
      Engine: !Ref DBEngineVersion
      MonitoringInterval: 30
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn

Outputs:
  JDBCAuroraConnectionString:
    Description: JDBC connection string for the database
    Value: !Join ['', ['jdbc:mysql://', !GetAtt [AuroraInstance, Endpoint.Address], ':', !GetAtt [
            AuroraInstance, Endpoint.Port], /, !Ref AuroraDBName]]
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-JDBC"

  DatabaseEndpoint:
    Description: The database endpoint
    Value: !GetAtt AuroraInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-Endpoint-Address"


  DatabasePort:
    Description: The database port
    Value: !GetAtt AuroraInstance.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-Endpoint-Port"

  VPCId:
    Description: Aurora VPC identifier
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-VPCID"

  PrivateSubnet1:
    Description: Aurora private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-Private-Subnet-1"

  PrivateSubnet2:
    Description: Aurora private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-Private-Subnet-2"

  AuroraSecurityGroup:
    Description: Aurora security group
    Value: !Ref AuroraSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-Security-Group"

  PrivateRouteTable:
    Description: Aurora private route table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-Aurora-Route-Table"
